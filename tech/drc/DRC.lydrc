<?xml version='1.0' encoding='utf-8'?>
<klayout-macro><description /><version /><category>drc</category><prolog /><epilog /><doc /><autorun>false</autorun><autorun-early>false</autorun-early><shortcut /><show-in-menu>true</show-in-menu><group-name>drc_scripts</group-name><menu-path>tools_menu.drc.end</menu-path><interpreter>dsl</interpreter><dsl-interpreter-name>drc-dsl-xml</dsl-interpreter-name><text># Autogenerated file. Changes will be overwritten.

report("C4M.IHPSG13G2 DRC")

def width_check(layer, w)
    small = layer.width(w).polygons
    big = layer.sized(-0.5*w).size(0.5*w)

    small | big
end

def space4width_check(layer, w, s)
    big = layer.sized(-0.5*w).size(0.5*w)
    big.edges.separation(layer.edges, s)
end

def space4widthlength_check(layer, w, l, s)
    big = layer.sized(-0.5*w).size(0.5*w)
    big.edges.separation(layer.edges, s).with_length(l + 1.dbu, nil)
end

def oppenc_check(inner, outer, min, max)
    toosmall = outer.enclosing(inner, min).second_edges

    smallenc = outer.enclosing(inner, max - 1.dbu, projection).second_edges
    # These edges may not touch each other
    touching = smallenc.width(1.dbu, angle_limit(100)).edges

    inner.interacting(toosmall + touching)
end

def extend_check(base, extend, e)
    extend.enclosing(base, e).first_edges.not_interacting(base)
end

def dens_check(output, input, min, max)
    tp = RBA::TilingProcessor::new

    tp.output("res", output.data)
    tp.input("input", input.data)
    tp.dbu = 1.dbu  # establish the real database unit
    tp.var("vmin", min)
    tp.var("vmax", max)

    tp.queue("_tile &amp;&amp; (var d = to_f(input.area(_tile.bbox)) / to_f(_tile.bbox.area); (d &lt; vmin || d &gt; vmax) &amp;&amp; _output(res, _tile.bbox))")
    tp.execute("Density check")
end

deep

# Define layers
NWell = input(31, 0)
pSD = input(14, 0)
ThickGateOx = input(44, 0)
Activ_pin = input(1, 2)
Activ_obs = input(1, 100)
Activ = input(1, 0)
GatPoly_pin = input(5, 2)
GatPoly_obs = input(5, 100)
GatPoly = input(5, 0)
Metal1_pin = input(8, 2)
Metal1_obs = input(8, 100)
Metal1 = input(8, 0)
Metal2_pin = input(10, 2)
Metal2_obs = input(10, 100)
Metal2 = input(10, 0)
Metal3_pin = input(30, 2)
Metal3_obs = input(30, 100)
Metal3 = input(30, 0)
Metal4_pin = input(50, 2)
Metal4_obs = input(50, 100)
Metal4 = input(50, 0)
Metal5_pin = input(67, 2)
Metal5_obs = input(67, 100)
Metal5 = input(67, 0)
TopMetal1_pin = input(126, 2)
TopMetal1_obs = input(126, 100)
TopMetal1 = input(126, 0)
TopMetal2_pin = input(134, 2)
TopMetal2_obs = input(134, 100)
TopMetal2 = input(134, 0)
Cont_obs = input(6, 100)
Via1_obs = input(19, 100)
Via2_obs = input(29, 100)
Via3_obs = input(49, 100)
Via4_obs = input(66, 100)
TopVia1_obs = input(125, 100)
TopVia2_obs = input(133, 100)
Cont = input(6, 0)
Via1 = input(19, 0)
Via2 = input(29, 0)
Via3 = input(49, 0)
Via4 = input(66, 0)
TopVia1 = input(125, 0)
TopVia2 = input(133, 0)
Substrate = input(40, 0)
Passiv = input(9, 0)
EXTBlock = input(111, 0)
Recog_dio = input(99, 31)
RES = input(24, 0)
SalBlock = input(28, 0)
Recog_esd = input(99, 30)
TEXT = input(63, 0)
prBoundary = input(189, 0)

# Grid check
NWell.ongrid(0.005).output(
    "NWell grid", "NWell grid: 0.005µm"
)
pSD.ongrid(0.005).output(
    "pSD grid", "pSD grid: 0.005µm"
)
ThickGateOx.ongrid(0.005).output(
    "ThickGateOx grid", "ThickGateOx grid: 0.005µm"
)
Activ_pin.ongrid(0.005).output(
    "Activ_pin grid", "Activ_pin grid: 0.005µm"
)
Activ_obs.ongrid(0.005).output(
    "Activ_obs grid", "Activ_obs grid: 0.005µm"
)
Activ.ongrid(0.005).output(
    "Activ grid", "Activ grid: 0.005µm"
)
GatPoly_pin.ongrid(0.005).output(
    "GatPoly_pin grid", "GatPoly_pin grid: 0.005µm"
)
GatPoly_obs.ongrid(0.005).output(
    "GatPoly_obs grid", "GatPoly_obs grid: 0.005µm"
)
GatPoly.ongrid(0.005).output(
    "GatPoly grid", "GatPoly grid: 0.005µm"
)
Metal1_pin.ongrid(0.005).output(
    "Metal1_pin grid", "Metal1_pin grid: 0.005µm"
)
Metal1_obs.ongrid(0.005).output(
    "Metal1_obs grid", "Metal1_obs grid: 0.005µm"
)
Metal1.ongrid(0.005).output(
    "Metal1 grid", "Metal1 grid: 0.005µm"
)
Metal2_pin.ongrid(0.005).output(
    "Metal2_pin grid", "Metal2_pin grid: 0.005µm"
)
Metal2_obs.ongrid(0.005).output(
    "Metal2_obs grid", "Metal2_obs grid: 0.005µm"
)
Metal2.ongrid(0.005).output(
    "Metal2 grid", "Metal2 grid: 0.005µm"
)
Metal3_pin.ongrid(0.005).output(
    "Metal3_pin grid", "Metal3_pin grid: 0.005µm"
)
Metal3_obs.ongrid(0.005).output(
    "Metal3_obs grid", "Metal3_obs grid: 0.005µm"
)
Metal3.ongrid(0.005).output(
    "Metal3 grid", "Metal3 grid: 0.005µm"
)
Metal4_pin.ongrid(0.005).output(
    "Metal4_pin grid", "Metal4_pin grid: 0.005µm"
)
Metal4_obs.ongrid(0.005).output(
    "Metal4_obs grid", "Metal4_obs grid: 0.005µm"
)
Metal4.ongrid(0.005).output(
    "Metal4 grid", "Metal4 grid: 0.005µm"
)
Metal5_pin.ongrid(0.005).output(
    "Metal5_pin grid", "Metal5_pin grid: 0.005µm"
)
Metal5_obs.ongrid(0.005).output(
    "Metal5_obs grid", "Metal5_obs grid: 0.005µm"
)
Metal5.ongrid(0.005).output(
    "Metal5 grid", "Metal5 grid: 0.005µm"
)
TopMetal1_pin.ongrid(0.005).output(
    "TopMetal1_pin grid", "TopMetal1_pin grid: 0.005µm"
)
TopMetal1_obs.ongrid(0.005).output(
    "TopMetal1_obs grid", "TopMetal1_obs grid: 0.005µm"
)
TopMetal1.ongrid(0.005).output(
    "TopMetal1 grid", "TopMetal1 grid: 0.005µm"
)
TopMetal2_pin.ongrid(0.005).output(
    "TopMetal2_pin grid", "TopMetal2_pin grid: 0.005µm"
)
TopMetal2_obs.ongrid(0.005).output(
    "TopMetal2_obs grid", "TopMetal2_obs grid: 0.005µm"
)
TopMetal2.ongrid(0.005).output(
    "TopMetal2 grid", "TopMetal2 grid: 0.005µm"
)
Cont_obs.ongrid(0.005).output(
    "Cont_obs grid", "Cont_obs grid: 0.005µm"
)
Via1_obs.ongrid(0.005).output(
    "Via1_obs grid", "Via1_obs grid: 0.005µm"
)
Via2_obs.ongrid(0.005).output(
    "Via2_obs grid", "Via2_obs grid: 0.005µm"
)
Via3_obs.ongrid(0.005).output(
    "Via3_obs grid", "Via3_obs grid: 0.005µm"
)
Via4_obs.ongrid(0.005).output(
    "Via4_obs grid", "Via4_obs grid: 0.005µm"
)
TopVia1_obs.ongrid(0.005).output(
    "TopVia1_obs grid", "TopVia1_obs grid: 0.005µm"
)
TopVia2_obs.ongrid(0.005).output(
    "TopVia2_obs grid", "TopVia2_obs grid: 0.005µm"
)
Cont.ongrid(0.005).output(
    "Cont grid", "Cont grid: 0.005µm"
)
Via1.ongrid(0.005).output(
    "Via1 grid", "Via1 grid: 0.005µm"
)
Via2.ongrid(0.005).output(
    "Via2 grid", "Via2 grid: 0.005µm"
)
Via3.ongrid(0.005).output(
    "Via3 grid", "Via3 grid: 0.005µm"
)
Via4.ongrid(0.005).output(
    "Via4 grid", "Via4 grid: 0.005µm"
)
TopVia1.ongrid(0.005).output(
    "TopVia1 grid", "TopVia1 grid: 0.005µm"
)
TopVia2.ongrid(0.005).output(
    "TopVia2 grid", "TopVia2 grid: 0.005µm"
)
Substrate.ongrid(0.005).output(
    "Substrate grid", "Substrate grid: 0.005µm"
)
Passiv.ongrid(0.005).output(
    "Passiv grid", "Passiv grid: 0.005µm"
)
EXTBlock.ongrid(0.005).output(
    "EXTBlock grid", "EXTBlock grid: 0.005µm"
)
Recog_dio.ongrid(0.005).output(
    "Recog_dio grid", "Recog_dio grid: 0.005µm"
)
RES.ongrid(0.005).output(
    "RES grid", "RES grid: 0.005µm"
)
SalBlock.ongrid(0.005).output(
    "SalBlock grid", "SalBlock grid: 0.005µm"
)
Recog_esd.ongrid(0.005).output(
    "Recog_esd grid", "Recog_esd grid: 0.005µm"
)
TEXT.ongrid(0.005).output(
    "TEXT grid", "TEXT grid: 0.005µm"
)
prBoundary.ongrid(0.005).output(
    "prBoundary grid", "prBoundary grid: 0.005µm"
)

# Derived layers
# wafer.alias(_wafer)
_wafer = extent.sized(0.31)
# _wafer.remove(NWell).alias(substrate:IHPSG13G2)
substrate__IHPSG13G2 = (_wafer-NWell)
# Activ.remove(GatPoly).alias(Activ__conn)
Activ__conn = (Activ-GatPoly)
# intersect(Activ__conn,pSD).alias(Activ__conn:pSD)
Activ__conn__pSD = (Activ__conn&amp;pSD)
# Activ__conn.remove(pSD).alias(Activ__conn:bare)
Activ__conn__bare = (Activ__conn-pSD)
# GatPoly.remove(join(RES,SalBlock)).alias(GatPoly__conn)
GatPoly__conn = (GatPoly-(RES+SalBlock))
# intersect(Activ,GatPoly__conn,ThickGateOx).alias(gate:hvmosgate)
gate__hvmosgate = (Activ&amp;GatPoly__conn&amp;ThickGateOx)
# intersect(Activ,GatPoly__conn,_wafer.remove(ThickGateOx)).alias(gate:lvmosgate)
gate__lvmosgate = (Activ&amp;GatPoly__conn&amp;(_wafer-ThickGateOx))
# gate:hvmosgate.remove(NWell).alias(gate:mosfet:sg13g2_hv_nmos)
gate__mosfet__sg13g2_hv_nmos = (gate__hvmosgate-NWell)
# intersect(gate:hvmosgate,pSD,NWell).alias(gate:mosfet:sg13g2_hv_pmos)
gate__mosfet__sg13g2_hv_pmos = (gate__hvmosgate&amp;pSD&amp;NWell)
# gate:lvmosgate.remove(NWell).alias(gate:mosfet:sg13g2_lv_nmos)
gate__mosfet__sg13g2_lv_nmos = (gate__lvmosgate-NWell)
# intersect(gate:lvmosgate,pSD,NWell).alias(gate:mosfet:sg13g2_lv_pmos)
gate__mosfet__sg13g2_lv_pmos = (gate__lvmosgate&amp;pSD&amp;NWell)
# intersect(GatPoly,SalBlock,pSD,EXTBlock).alias(resistor:Rppd)
resistor__Rppd = (GatPoly&amp;SalBlock&amp;pSD&amp;EXTBlock)
# intersect(SalBlock).alias(indicators:resistor:Rppd)
indicators__resistor__Rppd = (SalBlock)
# intersect(resistor:Rppd,indicators:resistor:Rppd).alias(body:resistor:Rppd)
body__resistor__Rppd = (resistor__Rppd&amp;indicators__resistor__Rppd)
# intersect(GatPoly,RES).alias(resistor:Rsil)
resistor__Rsil = (GatPoly&amp;RES)
# intersect(RES).alias(indicators:resistor:Rsil)
indicators__resistor__Rsil = (RES)
# intersect(resistor:Rsil,indicators:resistor:Rsil).alias(body:resistor:Rsil)
body__resistor__Rsil = (resistor__Rsil&amp;indicators__resistor__Rsil)
# intersect(Activ,Recog.dio).alias(diode:ndiode)
diode__ndiode = (Activ&amp;Recog_dio)
# intersect(Activ,Recog.dio,pSD).alias(diode:pdiode)
diode__pdiode = (Activ&amp;Recog_dio&amp;pSD)

# Connectivity
# connect(substrate:IHPSG13G2,_wafer)
connect(substrate__IHPSG13G2, _wafer)
# connect(Activ,Activ.pin)
connect(Activ, Activ_pin)
# connect(Activ__conn,Activ__conn:pSD)
connect(Activ__conn, Activ__conn__pSD)
# connect(Activ__conn:pSD,substrate:IHPSG13G2)
connect(Activ__conn__pSD, substrate__IHPSG13G2)
# connect(Activ__conn,Activ__conn:bare)
connect(Activ__conn, Activ__conn__bare)
# connect(Activ__conn:bare,NWell)
connect(Activ__conn__bare, NWell)
# connect(GatPoly,GatPoly.pin)
connect(GatPoly, GatPoly_pin)
# connect(Metal1,Metal1.pin)
connect(Metal1, Metal1_pin)
# connect(Metal2,Metal2.pin)
connect(Metal2, Metal2_pin)
# connect(Metal3,Metal3.pin)
connect(Metal3, Metal3_pin)
# connect(Metal4,Metal4.pin)
connect(Metal4, Metal4_pin)
# connect(Metal5,Metal5.pin)
connect(Metal5, Metal5_pin)
# connect(TopMetal1,TopMetal1.pin)
connect(TopMetal1, TopMetal1_pin)
# connect(TopMetal2,TopMetal2.pin)
connect(TopMetal2, TopMetal2_pin)
# connect((Activ__conn,GatPoly__conn),Cont)
connect(Activ__conn, Cont)
connect(GatPoly__conn, Cont)
# connect(Cont,Metal1)
connect(Cont, Metal1)
# connect(Metal1,Via1)
connect(Metal1, Via1)
# connect(Via1,Metal2)
connect(Via1, Metal2)
# connect(Metal2,Via2)
connect(Metal2, Via2)
# connect(Via2,Metal3)
connect(Via2, Metal3)
# connect(Metal3,Via3)
connect(Metal3, Via3)
# connect(Via3,Metal4)
connect(Via3, Metal4)
# connect(Metal4,Via4)
connect(Metal4, Via4)
# connect(Via4,Metal5)
connect(Via4, Metal5)
# connect(Metal5,TopVia1)
connect(Metal5, TopVia1)
# connect(TopVia1,TopMetal1)
connect(TopVia1, TopMetal1)
# connect(TopMetal1,TopVia2)
connect(TopMetal1, TopVia2)
# connect(TopVia2,TopMetal2)
connect(TopVia2, TopMetal2)

# DRC rules
# NWell.width &gt;= 0.62
NWell.width(0.62).output(
    "NWell width", "NWell minimum width: 0.62µm"
)
# NWell.space &gt;= 0.62
NWell.space(0.62).output(
    "NWell space", "NWell minimum space: 0.62µm"
)
# pSD.width &gt;= 0.31
pSD.width(0.31).output(
    "pSD width", "pSD minimum width: 0.31µm"
)
# pSD.space &gt;= 0.31
pSD.space(0.31).output(
    "pSD space", "pSD minimum space: 0.31µm"
)
# pSD.area &gt;= 0.25
pSD.with_area(nil, 0.25).output(
    "pSD area", "pSD minimum area: 0.25µm"
)
# ThickGateOx.width &gt;= 0.86
ThickGateOx.width(0.86).output(
    "ThickGateOx width", "ThickGateOx minimum width: 0.86µm"
)
# ThickGateOx.space &gt;= 0.86
ThickGateOx.space(0.86).output(
    "ThickGateOx space", "ThickGateOx minimum space: 0.86µm"
)
# Activ.width &gt;= 0.15
Activ.width(0.15).output(
    "Activ width", "Activ minimum width: 0.15µm"
)
# Activ.space &gt;= 0.21
Activ.space(0.21).output(
    "Activ space", "Activ minimum space: 0.21µm"
)
# Activ.area &gt;= 0.122
Activ.with_area(nil, 0.122).output(
    "Activ area", "Activ minimum area: 0.122µm"
)
# edge(pSD).interact_with(Activ).length == 0
pSD.edges.interacting(Activ).output("pSD.edges.interacting(Activ) empty")
# Activ.enclosed_by(pSD) &gt;= Enclosure(0.18)
pSD.enclosing(Activ, 0.18).output(
    "pSD:Activ enclosure",
    "Minimum enclosure of pSD around Activ: 0.18µm"
)
# intersect(Activ,pSD).enclosed_by(NWell) &gt;= Enclosure(0.31)
NWell.enclosing((Activ&amp;pSD), 0.31).output(
    "NWell:(Activ&amp;pSD) enclosure",
    "Minimum enclosure of NWell around (Activ&amp;pSD): 0.31µm"
)
# intersect(Activ,ThickGateOx).enclosed_by(NWell) &gt;= Enclosure(0.62)
NWell.enclosing((Activ&amp;ThickGateOx), 0.62).output(
    "NWell:(Activ&amp;ThickGateOx) enclosure",
    "Minimum enclosure of NWell around (Activ&amp;ThickGateOx): 0.62µm"
)
# intersect(Activ,pSD).enclosed_by(substrate:IHPSG13G2) &gt;= Enclosure(0.03)
substrate__IHPSG13G2.enclosing((Activ&amp;pSD), 0.03).output(
    "substrate__IHPSG13G2:(Activ&amp;pSD) enclosure",
    "Minimum enclosure of substrate__IHPSG13G2 around (Activ&amp;pSD): 0.03µm"
)
# intersect(Activ,ThickGateOx).enclosed_by(substrate:IHPSG13G2) &gt;= Enclosure(0.62)
substrate__IHPSG13G2.enclosing((Activ&amp;ThickGateOx), 0.62).output(
    "substrate__IHPSG13G2:(Activ&amp;ThickGateOx) enclosure",
    "Minimum enclosure of substrate__IHPSG13G2 around (Activ&amp;ThickGateOx): 0.62µm"
)
# Activ.enclosed_by(ThickGateOx) &gt;= Enclosure(0.27)
ThickGateOx.enclosing(Activ, 0.27).output(
    "ThickGateOx:Activ enclosure",
    "Minimum enclosure of ThickGateOx around Activ: 0.27µm"
)
# edge(Activ).interact_with(edge(NWell)).length == 0
Activ.edges.interacting(NWell.edges).output("Activ.edges.interacting(NWell.edges) empty")
# GatPoly.width &gt;= 0.13
GatPoly.width(0.13).output(
    "GatPoly width", "GatPoly minimum width: 0.13µm"
)
# GatPoly.space &gt;= 0.18
GatPoly.space(0.18).output(
    "GatPoly space", "GatPoly minimum space: 0.18µm"
)
# GatPoly.area &gt;= 0.09
GatPoly.with_area(nil, 0.09).output(
    "GatPoly area", "GatPoly minimum area: 0.09µm"
)
# Metal1.width &gt;= 0.16
Metal1.width(0.16).output(
    "Metal1 width", "Metal1 minimum width: 0.16µm"
)
# Metal1.space &gt;= 0.18
Metal1.space(0.18).output(
    "Metal1 space", "Metal1 minimum space: 0.18µm"
)
# Metal1.area &gt;= 0.09
Metal1.with_area(nil, 0.09).output(
    "Metal1 area", "Metal1 minimum area: 0.09µm"
)
# space(Metal1.parts_with(Metal1.width &gt;= 0.3,Metal1.length &gt;= 1.0),Metal1) &gt;= 0.22
space4width_check(Metal1, 0.3, 0.22).output(
    "[Warning]Metal1 table spacing",
    "Check minimum Metal1 spacing for 0.3µm width and 1.0µm length: 0.22µm"
)
space4widthlength_check(Metal1, 0.3, 1.0, 0.22).output(
    "Metal1 table spacing",
    "Minimum Metal1 spacing for 0.3µm width and 1.0µm length: 0.22µm"
)
# space(Metal1.parts_with(Metal1.width &gt;= 10.0,Metal1.length &gt;= 10.0),Metal1) &gt;= 0.6
space4width_check(Metal1, 10.0, 0.6).output(
    "[Warning]Metal1 table spacing",
    "Check minimum Metal1 spacing for 10.0µm width and 10.0µm length: 0.6µm"
)
space4widthlength_check(Metal1, 10.0, 10.0, 0.6).output(
    "Metal1 table spacing",
    "Minimum Metal1 spacing for 10.0µm width and 10.0µm length: 0.6µm"
)
# Metal2.width &gt;= 0.2
Metal2.width(0.2).output(
    "Metal2 width", "Metal2 minimum width: 0.2µm"
)
# Metal2.space &gt;= 0.21
Metal2.space(0.21).output(
    "Metal2 space", "Metal2 minimum space: 0.21µm"
)
# Metal2.area &gt;= 0.144
Metal2.with_area(nil, 0.144).output(
    "Metal2 area", "Metal2 minimum area: 0.144µm"
)
# space(Metal2.parts_with(Metal2.width &gt;= 0.39,Metal2.length &gt;= 1.0),Metal2) &gt;= 0.24
space4width_check(Metal2, 0.39, 0.24).output(
    "[Warning]Metal2 table spacing",
    "Check minimum Metal2 spacing for 0.39µm width and 1.0µm length: 0.24µm"
)
space4widthlength_check(Metal2, 0.39, 1.0, 0.24).output(
    "Metal2 table spacing",
    "Minimum Metal2 spacing for 0.39µm width and 1.0µm length: 0.24µm"
)
# space(Metal2.parts_with(Metal2.width &gt;= 10.0,Metal2.length &gt;= 10.0),Metal2) &gt;= 0.6
space4width_check(Metal2, 10.0, 0.6).output(
    "[Warning]Metal2 table spacing",
    "Check minimum Metal2 spacing for 10.0µm width and 10.0µm length: 0.6µm"
)
space4widthlength_check(Metal2, 10.0, 10.0, 0.6).output(
    "Metal2 table spacing",
    "Minimum Metal2 spacing for 10.0µm width and 10.0µm length: 0.6µm"
)
# Metal3.width &gt;= 0.2
Metal3.width(0.2).output(
    "Metal3 width", "Metal3 minimum width: 0.2µm"
)
# Metal3.space &gt;= 0.21
Metal3.space(0.21).output(
    "Metal3 space", "Metal3 minimum space: 0.21µm"
)
# Metal3.area &gt;= 0.144
Metal3.with_area(nil, 0.144).output(
    "Metal3 area", "Metal3 minimum area: 0.144µm"
)
# space(Metal3.parts_with(Metal3.width &gt;= 0.39,Metal3.length &gt;= 1.0),Metal3) &gt;= 0.24
space4width_check(Metal3, 0.39, 0.24).output(
    "[Warning]Metal3 table spacing",
    "Check minimum Metal3 spacing for 0.39µm width and 1.0µm length: 0.24µm"
)
space4widthlength_check(Metal3, 0.39, 1.0, 0.24).output(
    "Metal3 table spacing",
    "Minimum Metal3 spacing for 0.39µm width and 1.0µm length: 0.24µm"
)
# space(Metal3.parts_with(Metal3.width &gt;= 10.0,Metal3.length &gt;= 10.0),Metal3) &gt;= 0.6
space4width_check(Metal3, 10.0, 0.6).output(
    "[Warning]Metal3 table spacing",
    "Check minimum Metal3 spacing for 10.0µm width and 10.0µm length: 0.6µm"
)
space4widthlength_check(Metal3, 10.0, 10.0, 0.6).output(
    "Metal3 table spacing",
    "Minimum Metal3 spacing for 10.0µm width and 10.0µm length: 0.6µm"
)
# Metal4.width &gt;= 0.2
Metal4.width(0.2).output(
    "Metal4 width", "Metal4 minimum width: 0.2µm"
)
# Metal4.space &gt;= 0.21
Metal4.space(0.21).output(
    "Metal4 space", "Metal4 minimum space: 0.21µm"
)
# Metal4.area &gt;= 0.144
Metal4.with_area(nil, 0.144).output(
    "Metal4 area", "Metal4 minimum area: 0.144µm"
)
# space(Metal4.parts_with(Metal4.width &gt;= 0.39,Metal4.length &gt;= 1.0),Metal4) &gt;= 0.24
space4width_check(Metal4, 0.39, 0.24).output(
    "[Warning]Metal4 table spacing",
    "Check minimum Metal4 spacing for 0.39µm width and 1.0µm length: 0.24µm"
)
space4widthlength_check(Metal4, 0.39, 1.0, 0.24).output(
    "Metal4 table spacing",
    "Minimum Metal4 spacing for 0.39µm width and 1.0µm length: 0.24µm"
)
# space(Metal4.parts_with(Metal4.width &gt;= 10.0,Metal4.length &gt;= 10.0),Metal4) &gt;= 0.6
space4width_check(Metal4, 10.0, 0.6).output(
    "[Warning]Metal4 table spacing",
    "Check minimum Metal4 spacing for 10.0µm width and 10.0µm length: 0.6µm"
)
space4widthlength_check(Metal4, 10.0, 10.0, 0.6).output(
    "Metal4 table spacing",
    "Minimum Metal4 spacing for 10.0µm width and 10.0µm length: 0.6µm"
)
# Metal5.width &gt;= 0.2
Metal5.width(0.2).output(
    "Metal5 width", "Metal5 minimum width: 0.2µm"
)
# Metal5.space &gt;= 0.21
Metal5.space(0.21).output(
    "Metal5 space", "Metal5 minimum space: 0.21µm"
)
# Metal5.area &gt;= 0.144
Metal5.with_area(nil, 0.144).output(
    "Metal5 area", "Metal5 minimum area: 0.144µm"
)
# space(Metal5.parts_with(Metal5.width &gt;= 0.39,Metal5.length &gt;= 1.0),Metal5) &gt;= 0.24
space4width_check(Metal5, 0.39, 0.24).output(
    "[Warning]Metal5 table spacing",
    "Check minimum Metal5 spacing for 0.39µm width and 1.0µm length: 0.24µm"
)
space4widthlength_check(Metal5, 0.39, 1.0, 0.24).output(
    "Metal5 table spacing",
    "Minimum Metal5 spacing for 0.39µm width and 1.0µm length: 0.24µm"
)
# space(Metal5.parts_with(Metal5.width &gt;= 10.0,Metal5.length &gt;= 10.0),Metal5) &gt;= 0.6
space4width_check(Metal5, 10.0, 0.6).output(
    "[Warning]Metal5 table spacing",
    "Check minimum Metal5 spacing for 10.0µm width and 10.0µm length: 0.6µm"
)
space4widthlength_check(Metal5, 10.0, 10.0, 0.6).output(
    "Metal5 table spacing",
    "Minimum Metal5 spacing for 10.0µm width and 10.0µm length: 0.6µm"
)
# TopMetal1.width &gt;= 1.64
TopMetal1.width(1.64).output(
    "TopMetal1 width", "TopMetal1 minimum width: 1.64µm"
)
# TopMetal1.space &gt;= 1.64
TopMetal1.space(1.64).output(
    "TopMetal1 space", "TopMetal1 minimum space: 1.64µm"
)
# TopMetal2.width &gt;= 2.0
TopMetal2.width(2.0).output(
    "TopMetal2 width", "TopMetal2 minimum width: 2.0µm"
)
# TopMetal2.space &gt;= 2.0
TopMetal2.space(2.0).output(
    "TopMetal2 space", "TopMetal2 minimum space: 2.0µm"
)
# space(TopMetal2.parts_with(TopMetal2.width &gt;= 5.0,TopMetal2.length &gt;= 50.0),TopMetal2) &gt;= 5.0
space4width_check(TopMetal2, 5.0, 5.0).output(
    "[Warning]TopMetal2 table spacing",
    "Check minimum TopMetal2 spacing for 5.0µm width and 50.0µm length: 5.0µm"
)
space4widthlength_check(TopMetal2, 5.0, 50.0, 5.0).output(
    "TopMetal2 table spacing",
    "Minimum TopMetal2 spacing for 5.0µm width and 50.0µm length: 5.0µm"
)
# Cont.width == 0.16
width_check(Cont, 0.16).output(
    "Cont width", "Cont width: 0.16µm"
)
# Cont.space &gt;= 0.18
Cont.space(0.18).output(
    "Cont space", "Cont minimum space: 0.18µm"
)
# Cont.enclosed_by(Activ) &gt;= Enclosure(0.07)
Activ.enclosing(Cont, 0.07).output(
    "Activ:Cont enclosure",
    "Minimum enclosure of Activ around Cont: 0.07µm"
)
# Cont.enclosed_by(GatPoly) &gt;= Enclosure(0.07)
GatPoly.enclosing(Cont, 0.07).output(
    "GatPoly:Cont enclosure",
    "Minimum enclosure of GatPoly around Cont: 0.07µm"
)
# Cont.enclosed_by(Metal1) &gt;= Enclosure((0.0,0.08))
oppenc_check(Cont, Metal1, 0.0, 0.08).output(
    "Metal1:Cont asymmetric enclosure",
    "Minimum enclosure of Metal1 around Cont: 0.0µm minimum, 0.08µm opposite"
)
# Via1.width == 0.19
width_check(Via1, 0.19).output(
    "Via1 width", "Via1 width: 0.19µm"
)
# Via1.space &gt;= 0.22
Via1.space(0.22).output(
    "Via1 space", "Via1 minimum space: 0.22µm"
)
# Via1.enclosed_by(Metal1) &gt;= Enclosure((0.01,0.05))
oppenc_check(Via1, Metal1, 0.01, 0.05).output(
    "Metal1:Via1 asymmetric enclosure",
    "Minimum enclosure of Metal1 around Via1: 0.01µm minimum, 0.05µm opposite"
)
# Via1.enclosed_by(Metal2) &gt;= Enclosure((0.005,0.05))
oppenc_check(Via1, Metal2, 0.005, 0.05).output(
    "Metal2:Via1 asymmetric enclosure",
    "Minimum enclosure of Metal2 around Via1: 0.005µm minimum, 0.05µm opposite"
)
# Via2.width == 0.19
width_check(Via2, 0.19).output(
    "Via2 width", "Via2 width: 0.19µm"
)
# Via2.space &gt;= 0.22
Via2.space(0.22).output(
    "Via2 space", "Via2 minimum space: 0.22µm"
)
# Via2.enclosed_by(Metal2) &gt;= Enclosure((0.005,0.05))
oppenc_check(Via2, Metal2, 0.005, 0.05).output(
    "Metal2:Via2 asymmetric enclosure",
    "Minimum enclosure of Metal2 around Via2: 0.005µm minimum, 0.05µm opposite"
)
# Via2.enclosed_by(Metal3) &gt;= Enclosure((0.005,0.05))
oppenc_check(Via2, Metal3, 0.005, 0.05).output(
    "Metal3:Via2 asymmetric enclosure",
    "Minimum enclosure of Metal3 around Via2: 0.005µm minimum, 0.05µm opposite"
)
# Via3.width == 0.19
width_check(Via3, 0.19).output(
    "Via3 width", "Via3 width: 0.19µm"
)
# Via3.space &gt;= 0.22
Via3.space(0.22).output(
    "Via3 space", "Via3 minimum space: 0.22µm"
)
# Via3.enclosed_by(Metal3) &gt;= Enclosure((0.005,0.05))
oppenc_check(Via3, Metal3, 0.005, 0.05).output(
    "Metal3:Via3 asymmetric enclosure",
    "Minimum enclosure of Metal3 around Via3: 0.005µm minimum, 0.05µm opposite"
)
# Via3.enclosed_by(Metal4) &gt;= Enclosure((0.005,0.05))
oppenc_check(Via3, Metal4, 0.005, 0.05).output(
    "Metal4:Via3 asymmetric enclosure",
    "Minimum enclosure of Metal4 around Via3: 0.005µm minimum, 0.05µm opposite"
)
# Via4.width == 0.19
width_check(Via4, 0.19).output(
    "Via4 width", "Via4 width: 0.19µm"
)
# Via4.space &gt;= 0.22
Via4.space(0.22).output(
    "Via4 space", "Via4 minimum space: 0.22µm"
)
# Via4.enclosed_by(Metal4) &gt;= Enclosure((0.005,0.05))
oppenc_check(Via4, Metal4, 0.005, 0.05).output(
    "Metal4:Via4 asymmetric enclosure",
    "Minimum enclosure of Metal4 around Via4: 0.005µm minimum, 0.05µm opposite"
)
# Via4.enclosed_by(Metal5) &gt;= Enclosure((0.005,0.05))
oppenc_check(Via4, Metal5, 0.005, 0.05).output(
    "Metal5:Via4 asymmetric enclosure",
    "Minimum enclosure of Metal5 around Via4: 0.005µm minimum, 0.05µm opposite"
)
# TopVia1.width == 0.42
width_check(TopVia1, 0.42).output(
    "TopVia1 width", "TopVia1 width: 0.42µm"
)
# TopVia1.space &gt;= 0.42
TopVia1.space(0.42).output(
    "TopVia1 space", "TopVia1 minimum space: 0.42µm"
)
# TopVia1.enclosed_by(Metal5) &gt;= Enclosure(0.01)
Metal5.enclosing(TopVia1, 0.01).output(
    "Metal5:TopVia1 enclosure",
    "Minimum enclosure of Metal5 around TopVia1: 0.01µm"
)
# TopVia1.enclosed_by(TopMetal1) &gt;= Enclosure(0.42)
TopMetal1.enclosing(TopVia1, 0.42).output(
    "TopMetal1:TopVia1 enclosure",
    "Minimum enclosure of TopMetal1 around TopVia1: 0.42µm"
)
# TopVia2.width == 0.9
width_check(TopVia2, 0.9).output(
    "TopVia2 width", "TopVia2 width: 0.9µm"
)
# TopVia2.space &gt;= 1.06
TopVia2.space(1.06).output(
    "TopVia2 space", "TopVia2 minimum space: 1.06µm"
)
# TopVia2.enclosed_by(TopMetal1) &gt;= Enclosure(0.5)
TopMetal1.enclosing(TopVia2, 0.5).output(
    "TopMetal1:TopVia2 enclosure",
    "Minimum enclosure of TopMetal1 around TopVia2: 0.5µm"
)
# TopVia2.enclosed_by(TopMetal2) &gt;= Enclosure(0.5)
TopMetal2.enclosing(TopVia2, 0.5).output(
    "TopMetal2:TopVia2 enclosure",
    "Minimum enclosure of TopMetal2 around TopVia2: 0.5µm"
)
# intersect(edge(Activ),edge(gate:hvmosgate)).length &gt;= 0.45
(Activ.edges&amp;gate__hvmosgate.edges).with_length(nil, 0.45).output(
    "(Activ.edges&amp;gate__hvmosgate.edges) length",
    "Minimum length of (Activ.edges&amp;gate__hvmosgate.edges): 0.45µm"
)
# intersect(edge(GatPoly__conn),edge(gate:hvmosgate)).length &gt;= 0.3
(GatPoly__conn.edges&amp;gate__hvmosgate.edges).with_length(nil, 0.3).output(
    "(GatPoly__conn.edges&amp;gate__hvmosgate.edges) length",
    "Minimum length of (GatPoly__conn.edges&amp;gate__hvmosgate.edges): 0.3µm"
)
# intersect(edge(GatPoly__conn),edge(gate:hvmosgate)).length &lt;= 10.0
(GatPoly__conn.edges&amp;gate__hvmosgate.edges).with_length(10.0, nil).output(
    "(GatPoly__conn.edges&amp;gate__hvmosgate.edges) maximum length",
    "Maximum length of (GatPoly__conn.edges&amp;gate__hvmosgate.edges): 10.0µm"
)
# Activ.extend_over(gate:hvmosgate) &gt;= 0.23
extend_check(gate__hvmosgate, Activ, 0.23).output(
    "Activ:gate__hvmosgate extension",
    "Minimum extension of Activ of gate__hvmosgate: 0.23µm"
)
# GatPoly__conn.extend_over(gate:hvmosgate) &gt;= 0.18
extend_check(gate__hvmosgate, GatPoly__conn, 0.18).output(
    "GatPoly__conn:gate__hvmosgate extension",
    "Minimum extension of GatPoly__conn of gate__hvmosgate: 0.18µm"
)
# intersect(edge(gate:hvmosgate),edge(GatPoly)).space &gt;= 0.25
(gate__hvmosgate.edges&amp;GatPoly.edges).space(0.25).output(
    "(gate__hvmosgate.edges&amp;GatPoly.edges) space",
    "Minimum spacing between (gate__hvmosgate.edges&amp;GatPoly.edges): 0.25µm"
)
# space(gate:hvmosgate,Cont) &gt;= 0.11
gate__hvmosgate.separation(Cont, 0.11, square).output(
    "gate__hvmosgate:Cont spacing",
    "Minimum spacing between gate__hvmosgate and Cont: 0.11µm"
)
# Activ.extend_over(gate:lvmosgate) &gt;= 0.23
extend_check(gate__lvmosgate, Activ, 0.23).output(
    "Activ:gate__lvmosgate extension",
    "Minimum extension of Activ of gate__lvmosgate: 0.23µm"
)
# GatPoly__conn.extend_over(gate:lvmosgate) &gt;= 0.18
extend_check(gate__lvmosgate, GatPoly__conn, 0.18).output(
    "GatPoly__conn:gate__lvmosgate extension",
    "Minimum extension of GatPoly__conn of gate__lvmosgate: 0.18µm"
)
# space(gate:lvmosgate,Cont) &gt;= 0.11
gate__lvmosgate.separation(Cont, 0.11, square).output(
    "gate__lvmosgate:Cont spacing",
    "Minimum spacing between gate__lvmosgate and Cont: 0.11µm"
)
# gate:mosfet:sg13g2_hv_pmos.enclosed_by(pSD) &gt;= Enclosure(0.4)
pSD.enclosing(gate__mosfet__sg13g2_hv_pmos, 0.4).output(
    "pSD:gate__mosfet__sg13g2_hv_pmos enclosure",
    "Minimum enclosure of pSD around gate__mosfet__sg13g2_hv_pmos: 0.4µm"
)
# gate:mosfet:sg13g2_lv_pmos.enclosed_by(pSD) &gt;= Enclosure(0.3)
pSD.enclosing(gate__mosfet__sg13g2_lv_pmos, 0.3).output(
    "pSD:gate__mosfet__sg13g2_lv_pmos enclosure",
    "Minimum enclosure of pSD around gate__mosfet__sg13g2_lv_pmos: 0.3µm"
)
# Passiv.width &gt;= 40.0
Passiv.width(40.0).output(
    "Passiv width", "Passiv minimum width: 40.0µm"
)
# Passiv.space &gt;= 3.5
Passiv.space(3.5).output(
    "Passiv space", "Passiv minimum space: 3.5µm"
)
# Passiv.enclosed_by(TopMetal2) &gt;= Enclosure(2.1)
TopMetal2.enclosing(Passiv, 2.1).output(
    "TopMetal2:Passiv enclosure",
    "Minimum enclosure of TopMetal2 around Passiv: 2.1µm"
)
# EXTBlock.width &gt;= 0.31
EXTBlock.width(0.31).output(
    "EXTBlock width", "EXTBlock minimum width: 0.31µm"
)
# EXTBlock.space &gt;= 0.31
EXTBlock.space(0.31).output(
    "EXTBlock space", "EXTBlock minimum space: 0.31µm"
)
# SalBlock.width &gt;= 0.42
SalBlock.width(0.42).output(
    "SalBlock width", "SalBlock minimum width: 0.42µm"
)
# SalBlock.space &gt;= 0.42
SalBlock.space(0.42).output(
    "SalBlock space", "SalBlock minimum space: 0.42µm"
)
# intersect(edge(body:resistor:Rppd),edge(indicators:resistor:Rppd)).length &gt;= 0.5
(body__resistor__Rppd.edges&amp;indicators__resistor__Rppd.edges).with_length(nil, 0.5).output(
    "(body__resistor__Rppd.edges&amp;indicators__resistor__Rppd.edges) length",
    "Minimum length of (body__resistor__Rppd.edges&amp;indicators__resistor__Rppd.edges): 0.5µm"
)
# intersect(edge(body:resistor:Rppd),edge(GatPoly)).length &gt;= 0.5
(body__resistor__Rppd.edges&amp;GatPoly.edges).with_length(nil, 0.5).output(
    "(body__resistor__Rppd.edges&amp;GatPoly.edges) length",
    "Minimum length of (body__resistor__Rppd.edges&amp;GatPoly.edges): 0.5µm"
)
# SalBlock.remove(GatPoly).width &gt;= 0.2
(SalBlock-GatPoly).width(0.2).output(
    "(SalBlock-GatPoly) width", "(SalBlock-GatPoly) minimum width: 0.2µm"
)
# resistor:Rppd.enclosed_by(pSD) &gt;= Enclosure(0.18)
pSD.enclosing(resistor__Rppd, 0.18).output(
    "pSD:resistor__Rppd enclosure",
    "Minimum enclosure of pSD around resistor__Rppd: 0.18µm"
)
# resistor:Rppd.enclosed_by(EXTBlock) &gt;= Enclosure(0.18)
EXTBlock.enclosing(resistor__Rppd, 0.18).output(
    "EXTBlock:resistor__Rppd enclosure",
    "Minimum enclosure of EXTBlock around resistor__Rppd: 0.18µm"
)
# intersect(edge(body:resistor:Rsil),edge(indicators:resistor:Rsil)).length &gt;= 0.5
(body__resistor__Rsil.edges&amp;indicators__resistor__Rsil.edges).with_length(nil, 0.5).output(
    "(body__resistor__Rsil.edges&amp;indicators__resistor__Rsil.edges) length",
    "Minimum length of (body__resistor__Rsil.edges&amp;indicators__resistor__Rsil.edges): 0.5µm"
)
# intersect(edge(body:resistor:Rsil),edge(GatPoly)).length &gt;= 0.5
(body__resistor__Rsil.edges&amp;GatPoly.edges).with_length(nil, 0.5).output(
    "(body__resistor__Rsil.edges&amp;GatPoly.edges) length",
    "Minimum length of (body__resistor__Rsil.edges&amp;GatPoly.edges): 0.5µm"
)
# RES.remove(GatPoly).width &gt;= 0.0
(RES-GatPoly).width(0.0).output(
    "(RES-GatPoly) width", "(RES-GatPoly) minimum width: 0.0µm"
)
# diode:ndiode.width &gt;= 0.48
diode__ndiode.width(0.48).output(
    "diode__ndiode width", "diode__ndiode minimum width: 0.48µm"
)
# Activ.enclosed_by(Recog.dio) &gt;= Enclosure(0.02)
Recog_dio.enclosing(Activ, 0.02).output(
    "Recog_dio:Activ enclosure",
    "Minimum enclosure of Recog_dio around Activ: 0.02µm"
)
# diode:pdiode.width &gt;= 0.48
diode__pdiode.width(0.48).output(
    "diode__pdiode width", "diode__pdiode minimum width: 0.48µm"
)
# Activ.enclosed_by(Recog.dio) &gt;= Enclosure(0.02)
Recog_dio.enclosing(Activ, 0.02).output(
    "Recog_dio:Activ enclosure",
    "Minimum enclosure of Recog_dio around Activ: 0.02µm"
)
# diode:pdiode.enclosed_by(pSD) &gt;= Enclosure(0.18)
pSD.enclosing(diode__pdiode, 0.18).output(
    "pSD:diode__pdiode enclosure",
    "Minimum enclosure of pSD around diode__pdiode: 0.18µm"
)
# space(Activ,ThickGateOx) &gt;= 0.27
Activ.separation(ThickGateOx, 0.27, square).output(
    "Activ:ThickGateOx spacing",
    "Minimum spacing between Activ and ThickGateOx: 0.27µm"
)
# space(NWell,Activ) &gt;= 0.24
NWell.separation(Activ, 0.24, square).output(
    "NWell:Activ spacing",
    "Minimum spacing between NWell and Activ: 0.24µm"
)
# space(SalBlock,Activ) &gt;= 0.2
SalBlock.separation(Activ, 0.2, square).output(
    "SalBlock:Activ spacing",
    "Minimum spacing between SalBlock and Activ: 0.2µm"
)
# space(SalBlock,GatPoly) &gt;= 0.2
SalBlock.separation(GatPoly, 0.2, square).output(
    "SalBlock:GatPoly spacing",
    "Minimum spacing between SalBlock and GatPoly: 0.2µm"
)
# space(SalBlock,Cont) &gt;= 0.2
SalBlock.separation(Cont, 0.2, square).output(
    "SalBlock:Cont spacing",
    "Minimum spacing between SalBlock and Cont: 0.2µm"
)
# space(Activ,pSD) &gt;= 0.18
Activ.separation(pSD, 0.18, square).output(
    "Activ:pSD spacing",
    "Minimum spacing between Activ and pSD: 0.18µm"
)
# space(Cont,Activ) &gt;= 0.14
Cont.separation(Activ, 0.14, square).output(
    "Cont:Activ spacing",
    "Minimum spacing between Cont and Activ: 0.14µm"
)
# space(EXTBlock,pSD) &gt;= 0.31
EXTBlock.separation(pSD, 0.31, square).output(
    "EXTBlock:pSD spacing",
    "Minimum spacing between EXTBlock and pSD: 0.31µm"
)
# space(Activ,GatPoly) &gt;= 0.07
Activ.separation(GatPoly, 0.07, square).output(
    "Activ:GatPoly spacing",
    "Minimum spacing between Activ and GatPoly: 0.07µm"
)
# space(GatPoly,EXTBlock) &gt;= 0.18
GatPoly.separation(EXTBlock, 0.18, square).output(
    "GatPoly:EXTBlock spacing",
    "Minimum spacing between GatPoly and EXTBlock: 0.18µm"
)
# space(gate:mosfet:sg13g2_lv_nmos,pSD) &gt;= 0.3
gate__mosfet__sg13g2_lv_nmos.separation(pSD, 0.3, square).output(
    "gate__mosfet__sg13g2_lv_nmos:pSD spacing",
    "Minimum spacing between gate__mosfet__sg13g2_lv_nmos and pSD: 0.3µm"
)
# space(gate:mosfet:sg13g2_hv_nmos,pSD) &gt;= 0.4
gate__mosfet__sg13g2_hv_nmos.separation(pSD, 0.4, square).output(
    "gate__mosfet__sg13g2_hv_nmos:pSD spacing",
    "Minimum spacing between gate__mosfet__sg13g2_hv_nmos and pSD: 0.4µm"
)
</text></klayout-macro>